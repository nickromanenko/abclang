import { JWT } from 'google-auth-library';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import moment from 'moment';

const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: '',
    key: '',
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const SPREADSHEET_ID = '';

export async function updateReport(call: any) {
    console.log('Updating Report:', call.call_id);
    // 1. Update Google Spreadsheet with messages list
    const sheet = await getSheet();
    // await sheet.clear();

    await sheet.setHeaderRow([
        'ID',
        'Transcript',
        'Summary',
        'Duration',
        'Sentiment',
        'Is Successful',
        'Category',
        'Recording URL',
        'Start Timestamp',
        'End Timestamp',
    ]);
    const sheetRowsData = (await sheet.getRows()).map((row: any) => row._rawData);
    console.log('Sheet Rows:', sheetRowsData.length);
    const row = {
        ID: call.call_id,
        Transcript: call.transcript,
        Summary: call.call_analysis.call_summary,
        Duration: call.duration_ms,
        Sentiment: call.call_analysis.user_sentiment,
        'Is Successful': call.call_analysis.is_successful ? 'Yes' : 'No',
        Category: call.call_analysis.custom_analysis_data.category,
        'Recording URL': call.recording_url,
        'Start Timestamp': moment(call.start_timestamp).format('YYYY-MM-DD HH:mm:ss'),
        'End Timestamp': moment(call.end_timestamp).format('YYYY-MM-DD HH:mm:ss'),
    };

    const rows = [row];
    await sheet.addRows(rows);
    return;
}

export async function getSheet() {
    const doc = new GoogleSpreadsheet(SPREADSHEET_ID, serviceAccountAuth);
    await doc.loadInfo();
    const sheet = doc.sheetsByIndex[0];
    return sheet;
}
