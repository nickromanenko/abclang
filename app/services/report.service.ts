import { JWT } from 'google-auth-library';
import { GoogleSpreadsheet } from 'google-spreadsheet';
import moment from 'moment';

const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: 'abc-357@chrome-genre-431509-p8.iam.gserviceaccount.com',
    key: '-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCz1cCm+Kup70Wg\nz1RYnWo2U8ELOw5H2KZ5OK3FSaviJlVgBHVbFV0ugB7ha9ZsbfiEW8eOE2R+3vrv\nXF3JYDf0Tib/F7GCfuLyHil31CNl7Kub9DzET3Uo0nA4xtp2Y2yjrutj9xKrDqUo\n7qfp203L2oXUiDXwjwVX7nNcC4dwObzG89pGbn3d6VExhxDzhkWhpfFj4wBGqIa+\ncXidb3J/koknuKGvHCwg+ik1z8TRT5YUvjFBxYvnXWe7y9iVwshTr1i4m3HCgFMz\nUZ4zk7DwRHCHI8LqnSzAO2oWFrRK22fyjI1CmiAqlazx9LCWe2XZFYhgCkQqkPuF\n8MY/y/XHAgMBAAECggEAH0uqjCQoU5llJ5gNGKLEUhH/PUIYuR4V0nCvpO6uL9v1\n7ZC5D5HHNolrVlVa6mG05uvF7Y6oZX/OcYtEcwAAnM5g8PGhnZERU4s2MjlDs8Ad\nGTXGwW8Gd4UvrGHGsOWaiV2ubyYXJJeW3Gmz5PmaL0inE5ZktKlfB69iefkzp67J\n1pnwE1F0YYFKAsL2YmPLRxnvPmLBXt2oXalDDzB4ynoVhXtg3kYG9oAOIA60ASFg\n2d2eS7w3oxqIL/b96s4+IDFbZphBpGaIAGub4n1gHb816mIyj33veLxpcoZxkogs\n1WY181fp/RsxlhxH3vfpgZIUe4G0DZOYKkZJv057uQKBgQDeOxz6ofzRXEZdIGTd\nmNWbZkAZ4dVzlgh+HENiV9azIMH4vXmxtVco8xByJm7mSk5IeM009D+QlLMbvEZy\ntGHN6Tbqv96mu+XzkX0FKPGNvCIV1ksFCjiXb9scVfEjBep7T/LlsnuYlf//VQDJ\nu01CpDgJ2CI6araEIMvwX+jgjQKBgQDPKWrYyl3LDoRTNzP/Sxu9wzzv2uU4E27f\nAswXvkGLS841EX7Viq9p7Tjp/Pnt3KbM1EsgUjm+6ahcJfeyeMDHz+q2eWhHBt5U\n+KOXOJ62Sp44cmYFGwiwXn9dgmCCXZIDYf+wA0WUJl6I1tg/lK5oTszLA8LJgHkT\n5MNrBE/sowKBgQCKcdEv4tKZqx66zX+I/bm1QhIVDbfodkN8LSddkNNUbMfqqj+y\nEgLmo+ZO9tqH5Sq3w2oz3yXqcHjUgopw0ydLHEr2G+odfVlYT/7OxB8X6Whiqkm6\nLg/rZ+fc0z2SUBEwGTJ9HqAZAvmkm9QN2P3c0mmG2HsaYXiq/7ONYHK30QKBgQDH\n0Z1cCqY5rID6e27OOrZBbcajXLJoSmZQ+bO+2ycBo1b9XSjH9QOJ2uVg3UB9rK2/\nOK5WOLm2ak6Yw46OOWdJ1EUDSUvJ5tghgcrZnCWKk6LVs5KwLglNhXi4y38nf/XN\nCYPFVQKSCgh5WTIw8crgldF3qOMD1cXz6F6OJRSqnQKBgFz9bavl1M4MQWAibpvw\nn5M1p8UR+4hfS++5X1o1VknTCXsYaFabX1AcDbD5jGs3T2BO2MIPHWIhOT8JhHCe\ntSwoTcpjfixU9yG2wsnyyE/Fb2oQDX9r+hf4dzklvSnIi2PldBkHW05DaZL+xybc\nsK9xQzstxjU5QTFlxQgkqVVt\n-----END PRIVATE KEY-----\n',
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const SPREADSHEET_ID = '1mCJ-3mijdhgfC777DfHV33yvnGqrtFNMCcn06gaN4KA';

export async function updateReport(call: any) {
    console.log('Updating Report:', call.id);
    // 1. Update Google Spreadsheet with messages list
    const sheet = await getSheet();
    // await sheet.clear();

    await sheet.setHeaderRow([
        'ID',
        'Transcript',
        'Summary',
        'Duration',
        'Sentiment',
        'Is Successful',
        'Category',
        'Recording URL',
        'Start Timestamp',
        'End Timestamp',
    ]);
    const sheetRowsData = (await sheet.getRows()).map((row: any) => row._rawData);
    console.log('Sheet Rows:', sheetRowsData.length);
    const row = {
        ID: call.call_id,
        Transcript: call.transcript,
        Summary: call.call_analysis.call_summary,
        Duration: call.duration_ms,
        Sentiment: call.call_analysis.user_sentiment,
        'Is Successful': call.call_analysis.is_successful ? 'Yes' : 'No',
        Category: call.call_analysis.custom_analysis_data.category,
        'Recording URL': call.recording_url,
        'Start Timestamp': moment(call.start_timestamp).format('YYYY-MM-DD HH:mm:ss'),
        'End Timestamp': moment(call.end_timestamp).format('YYYY-MM-DD HH:mm:ss'),
    };

    const rows = [row];
    await sheet.addRows(rows);
    return;
}

export async function getSheet() {
    const doc = new GoogleSpreadsheet(SPREADSHEET_ID, serviceAccountAuth);
    await doc.loadInfo();
    const sheet = doc.sheetsByIndex[0];
    return sheet;
}
